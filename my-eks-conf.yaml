---
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: my-eks-201 # name of the cluster
  region: us-east-1
  version: "1.27" # Kubernetes version
  # Add any other relevant metadata here if needed

vpc: # Refer: https://github.com/weaveworks/eksctl/blob/main/examples/04-existing-vpc.yaml
  id: "vpc-035821e2bc38f618f"
  subnets:
    public:
      my-public-201-a:
        id: "subnet-01b16c1d63848b2ed"
        az: "us-east-1a"
      my-public-201-b:
        id: "subnet-0e3f5b5da7b2d573b"
        az: "us-east-1b"
    private:
      my-private-201-a:
        id: "subnet-0e9303b255f3b2f47"
        az: "us-east-1a"
      my-private-201-b:
        id: "subnet-08ce66c1b8431ef8c"
        az: "us-east-1b"
  clusterEndpoints:
    publicAccess: true
    privateAccess: true
  nat:
    gateway: Disable # Disable since already created

iam: # Refer: https://eksctl.io/usage/iamserviceaccounts/
  withOIDC: true
  serviceAccounts: # pre-including some common iamserviceaccounts
    - metadata:
        name: aws-load-balancer-controller
        namespace: kube-system
      wellKnownPolicies:
        awsLoadBalancerController: true
    # Add other service accounts with their respective wellKnownPolicies as needed
    - metadata:
        name: ebs-csi-controller-sa
        namespace: kube-system
      wellKnownPolicies:
        ebsCSIController: true
    - metadata:
        name: efs-csi-controller-sa
        namespace: kube-system
      wellKnownPolicies:
        efsCSIController: true
    - metadata:
        name: external-dns
        namespace: kube-system
      wellKnownPolicies:
        externalDNS: true
    - metadata:
        name: cert-manager
        namespace: cert-manager
      wellKnownPolicies:
        certManager: true
    - metadata:
        name: cluster-autoscaler
        namespace: kube-system
        labels: {aws-usage: "cluster-ops"}
      wellKnownPolicies:
        autoScaler: true

nodeGroups: # Refer: https://github.com/weaveworks/eksctl/blob/main/examples/05-advanced-nodegroups.yaml
  - name: pvt-201-a-1
    labels: { role: workers }
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/my-eks-201: "shared"
    instancesDistribution:
      instanceTypes:
        - t2.medium
    desiredCapacity: 1
    minSize: 0
    maxSize: 3
    privateNetworking: true
    subnets:
      - my-private-201-a

  - name: pub-201-a-1
    labels: { role: workers }
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/my-eks-201: "shared"
    instancesDistribution:
      instanceTypes:
        - t2.medium
    desiredCapacity: 0
    minSize: 0
    maxSize: 1
    subnets:
      - my-public-201-a

  - name: my-nodegroup-with-taint
    instanceType: t2.medium
    desiredCapacity: 1
    minSize: 0
    maxSize: 5
    privateNetworking: true
    labels:
      role: workers
    taints:
      - key: exampleTaint
        value: "true"
        effect: NoSchedule
